// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid()) @map("_id")
  sub             String         @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime       @default(now())
  hashedPassword  String?
  role            String?
  groupId         String         @default("")
  group           Groups?        @relation(fields: [groupId], references: [id])
  seenMessageIds  String[]       @db.ObjectId
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  Account         Account[]
  Session         Session[]
  seenMessages    Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  Message         Message[]
}

model Projects {
  id                  String   @id @default(cuid()) @map("_id")
  ownerId             String
  organization        String?
  projectTitle        String?
  projectBrief        String?
  projectRequirements String?
  isApproved          String   @default("pending")
  assignedTo          String   @default("")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  files               String[]
  tasks               Task[]
}

model Task {
  id              String    @id @default(cuid()) @map("_id")
  projectId       String
  groupId         String
  type            String
  taskTitle       String
  taskDescription String
  sprint          String
  taskDueDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  status          Boolean   @default(false)
  Project         Projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Groups {
  id          String   @id @default(cuid()) @map("_id")
  lecturerId  String
  projectId   String?
  groupNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     User[]
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  messagesIds   String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  seenIds        String[]
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
}

model Attachment {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  url         String
  title       String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id         String   @id @default(uuid()) @map("_id")
  lecturerId String
  documentation   DateTime?
  code       DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Presentation {
  id                 String    @id @default(uuid()) @map("_id")
  lecturerId         String
  date               DateTime
  startTime          DateTime
  endTime            DateTime
  presentationLength String
  venue              String
  bookings           Booking[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Booking {
  id             String       @id @default(uuid()) @map("_id")
  presentationId String
  groupId        String
  Presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
